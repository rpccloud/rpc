package pkgName

import "github.com/rpccloud/rpc"

type rpcCache struct{}

// NewRPCCache ...
func NewRPCCache() rpc.ActionCache {
	return &rpcCache{}
}

// Get ...
func (p *rpcCache) Get(fnString string) rpc.ActionCacheFunc {
	switch fnString {
	case "":
		return fnCache0
	case "A":
		return fnCache1
	case "B":
		return fnCache2
	case "F":
		return fnCache3
	case "I":
		return fnCache4
	case "M":
		return fnCache5
	case "S":
		return fnCache6
	case "U":
		return fnCache7
	case "V":
		return fnCache8
	case "X":
		return fnCache9
	case "Y":
		return fnCache10
	case "Z":
		return fnCache11
	case "AY":
		return fnCache12
	case "BY":
		return fnCache13
	case "FY":
		return fnCache14
	case "IY":
		return fnCache15
	case "MY":
		return fnCache16
	case "SY":
		return fnCache17
	case "UY":
		return fnCache18
	case "VY":
		return fnCache19
	case "XY":
		return fnCache20
	case "YY":
		return fnCache21
	case "ZY":
		return fnCache22
	case "AAA":
		return fnCache23
	case "ABM":
		return fnCache24
	case "BUF":
		return fnCache25
	case "MFF":
		return fnCache26
	case "MMM":
		return fnCache27
	case "MMS":
		return fnCache28
	case "UFS":
		return fnCache29
	case "XAA":
		return fnCache30
	case "AAAAAAAA":
		return fnCache31
	case "BIUFSXAM":
		return fnCache32
	case "MAXSFUIB":
		return fnCache33
	case "BIUFSXAMYZ":
		return fnCache34
	case "BIUFXAMVYZ":
		return fnCache35
	case "BIUSXAMVYZ":
		return fnCache36
	case "BIUFSXAMVYZ":
		return fnCache37
	default:
		return nil
	}
}

func fnCache0(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime) rpc.Return)(rt)
		return 0
	}
}

func fnCache1(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadArray(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Array) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache2(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache3(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadFloat64(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Float64) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache4(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadInt64(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Int64) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache5(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache6(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadString(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.String) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache7(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadUint64(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Uint64) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache8(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTValue(rt); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTValue) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache9(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBytes(); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bytes) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache10(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTArray(rt); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTArray) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache11(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTMap(rt); err != nil {
		return 1
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTMap) rpc.Return)(rt, arg0)
		return 0
	}
}

func fnCache12(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadArray(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Array, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache13(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache14(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadFloat64(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Float64, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache15(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadInt64(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Int64, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache16(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache17(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadString(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.String, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache18(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadUint64(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Uint64, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache19(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTValue(rt); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTValue, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache20(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBytes(); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bytes, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache21(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTArray(rt); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTArray, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache22(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadRTMap(rt); err != nil {
		return 1
	} else if arg1, err := stream.ReadRTArray(rt); err != nil {
		return 2
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.RTMap, rpc.RTArray) rpc.Return)(rt, arg0, arg1)
		return 0
	}
}

func fnCache23(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadArray(); err != nil {
		return 1
	} else if arg1, err := stream.ReadArray(); err != nil {
		return 2
	} else if arg2, err := stream.ReadArray(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Array, rpc.Array, rpc.Array) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache24(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadArray(); err != nil {
		return 1
	} else if arg1, err := stream.ReadBool(); err != nil {
		return 2
	} else if arg2, err := stream.ReadMap(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Array, rpc.Bool, rpc.Map) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache25(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadUint64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadFloat64(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Uint64, rpc.Float64) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache26(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if arg1, err := stream.ReadFloat64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadFloat64(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map, rpc.Float64, rpc.Float64) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache27(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if arg1, err := stream.ReadMap(); err != nil {
		return 2
	} else if arg2, err := stream.ReadMap(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map, rpc.Map, rpc.Map) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache28(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if arg1, err := stream.ReadMap(); err != nil {
		return 2
	} else if arg2, err := stream.ReadString(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map, rpc.Map, rpc.String) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache29(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadUint64(); err != nil {
		return 1
	} else if arg1, err := stream.ReadFloat64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadString(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Uint64, rpc.Float64, rpc.String) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache30(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBytes(); err != nil {
		return 1
	} else if arg1, err := stream.ReadArray(); err != nil {
		return 2
	} else if arg2, err := stream.ReadArray(); err != nil {
		return 3
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bytes, rpc.Array, rpc.Array) rpc.Return)(rt, arg0, arg1, arg2)
		return 0
	}
}

func fnCache31(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadArray(); err != nil {
		return 1
	} else if arg1, err := stream.ReadArray(); err != nil {
		return 2
	} else if arg2, err := stream.ReadArray(); err != nil {
		return 3
	} else if arg3, err := stream.ReadArray(); err != nil {
		return 4
	} else if arg4, err := stream.ReadArray(); err != nil {
		return 5
	} else if arg5, err := stream.ReadArray(); err != nil {
		return 6
	} else if arg6, err := stream.ReadArray(); err != nil {
		return 7
	} else if arg7, err := stream.ReadArray(); err != nil {
		return 8
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Array, rpc.Array, rpc.Array, rpc.Array, rpc.Array, rpc.Array, rpc.Array, rpc.Array) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
		return 0
	}
}

func fnCache32(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadInt64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadUint64(); err != nil {
		return 3
	} else if arg3, err := stream.ReadFloat64(); err != nil {
		return 4
	} else if arg4, err := stream.ReadString(); err != nil {
		return 5
	} else if arg5, err := stream.ReadBytes(); err != nil {
		return 6
	} else if arg6, err := stream.ReadArray(); err != nil {
		return 7
	} else if arg7, err := stream.ReadMap(); err != nil {
		return 8
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Int64, rpc.Uint64, rpc.Float64, rpc.String, rpc.Bytes, rpc.Array, rpc.Map) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
		return 0
	}
}

func fnCache33(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadMap(); err != nil {
		return 1
	} else if arg1, err := stream.ReadArray(); err != nil {
		return 2
	} else if arg2, err := stream.ReadBytes(); err != nil {
		return 3
	} else if arg3, err := stream.ReadString(); err != nil {
		return 4
	} else if arg4, err := stream.ReadFloat64(); err != nil {
		return 5
	} else if arg5, err := stream.ReadUint64(); err != nil {
		return 6
	} else if arg6, err := stream.ReadInt64(); err != nil {
		return 7
	} else if arg7, err := stream.ReadBool(); err != nil {
		return 8
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Map, rpc.Array, rpc.Bytes, rpc.String, rpc.Float64, rpc.Uint64, rpc.Int64, rpc.Bool) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
		return 0
	}
}

func fnCache34(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadInt64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadUint64(); err != nil {
		return 3
	} else if arg3, err := stream.ReadFloat64(); err != nil {
		return 4
	} else if arg4, err := stream.ReadString(); err != nil {
		return 5
	} else if arg5, err := stream.ReadBytes(); err != nil {
		return 6
	} else if arg6, err := stream.ReadArray(); err != nil {
		return 7
	} else if arg7, err := stream.ReadMap(); err != nil {
		return 8
	} else if arg8, err := stream.ReadRTArray(rt); err != nil {
		return 9
	} else if arg9, err := stream.ReadRTMap(rt); err != nil {
		return 10
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Int64, rpc.Uint64, rpc.Float64, rpc.String, rpc.Bytes, rpc.Array, rpc.Map, rpc.RTArray, rpc.RTMap) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
		return 0
	}
}

func fnCache35(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadInt64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadUint64(); err != nil {
		return 3
	} else if arg3, err := stream.ReadFloat64(); err != nil {
		return 4
	} else if arg4, err := stream.ReadBytes(); err != nil {
		return 5
	} else if arg5, err := stream.ReadArray(); err != nil {
		return 6
	} else if arg6, err := stream.ReadMap(); err != nil {
		return 7
	} else if arg7, err := stream.ReadRTValue(rt); err != nil {
		return 8
	} else if arg8, err := stream.ReadRTArray(rt); err != nil {
		return 9
	} else if arg9, err := stream.ReadRTMap(rt); err != nil {
		return 10
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Int64, rpc.Uint64, rpc.Float64, rpc.Bytes, rpc.Array, rpc.Map, rpc.RTValue, rpc.RTArray, rpc.RTMap) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
		return 0
	}
}

func fnCache36(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadInt64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadUint64(); err != nil {
		return 3
	} else if arg3, err := stream.ReadString(); err != nil {
		return 4
	} else if arg4, err := stream.ReadBytes(); err != nil {
		return 5
	} else if arg5, err := stream.ReadArray(); err != nil {
		return 6
	} else if arg6, err := stream.ReadMap(); err != nil {
		return 7
	} else if arg7, err := stream.ReadRTValue(rt); err != nil {
		return 8
	} else if arg8, err := stream.ReadRTArray(rt); err != nil {
		return 9
	} else if arg9, err := stream.ReadRTMap(rt); err != nil {
		return 10
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Int64, rpc.Uint64, rpc.String, rpc.Bytes, rpc.Array, rpc.Map, rpc.RTValue, rpc.RTArray, rpc.RTMap) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
		return 0
	}
}

func fnCache37(rt rpc.Runtime, stream *rpc.Stream, fn interface{}) int {
	if arg0, err := stream.ReadBool(); err != nil {
		return 1
	} else if arg1, err := stream.ReadInt64(); err != nil {
		return 2
	} else if arg2, err := stream.ReadUint64(); err != nil {
		return 3
	} else if arg3, err := stream.ReadFloat64(); err != nil {
		return 4
	} else if arg4, err := stream.ReadString(); err != nil {
		return 5
	} else if arg5, err := stream.ReadBytes(); err != nil {
		return 6
	} else if arg6, err := stream.ReadArray(); err != nil {
		return 7
	} else if arg7, err := stream.ReadMap(); err != nil {
		return 8
	} else if arg8, err := stream.ReadRTValue(rt); err != nil {
		return 9
	} else if arg9, err := stream.ReadRTArray(rt); err != nil {
		return 10
	} else if arg10, err := stream.ReadRTMap(rt); err != nil {
		return 11
	} else if !stream.IsReadFinish() {
		return -1
	} else {
		stream.SetWritePosToBodyStart()
		fn.(func(rpc.Runtime, rpc.Bool, rpc.Int64, rpc.Uint64, rpc.Float64, rpc.String, rpc.Bytes, rpc.Array, rpc.Map, rpc.RTValue, rpc.RTArray, rpc.RTMap) rpc.Return)(rt, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
		return 0
	}
}

